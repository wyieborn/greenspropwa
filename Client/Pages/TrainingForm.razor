@page "/training-record"
@using GreensProPWA.Client.Components
@using GreensProPWA.Shared.DTO
@using GreensProPWA.Shared.Entity
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider

<h2 class="text-2xl font-bold text-gray-800 mb-4">Add Staff Training Record</h2>

<EditForm Model="record" OnValidSubmit="Submit">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">

        <div>
            <label class="block text-sm font-medium text-gray-700">Staff Name</label>
            @if (IsAdmin)
            {
                <InputText @bind-Value="record.StaffName" class="mt-1 block w-full border rounded p-2" />
            }
            else
            {
                <InputText @bind-Value="record.StaffName" class="mt-1 block w-full border rounded p-2 bg-gray-100" readonly />
            }
        </div>


        <div>
            <label class="block text-sm font-medium text-gray-700">Equipment Trained On</label>
            <select @bind="record.EquipmentTrainedOn" class="mt-1 block w-full border rounded p-2">
                <option disabled selected value="">-- Select Equipment --</option>
                @foreach (var item in equipmentList)
                {
                    <option value="@item.Name">@item.Name</option>
                }
            </select>
        </div>

        <div>
            <label class="block text-sm font-medium text-gray-700">Training Date</label>
            <InputDate class="mt-1 block w-full border rounded p-2" @bind-Value="record.TrainingDate" />
        </div>

        <div>
            <label class="block text-sm font-medium text-gray-700">Trainer</label>
            <select @bind="record.TrainerId" class="mt-1 block w-full border rounded p-2">
                <option disabled selected value="">-- Select Trainer --</option>
                @foreach (var t in trainers)
                {
                    <option value="@t.Id">@t.Name</option>
                }
            </select>
        </div>

        <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700">Signature (optional)</label>
            <SignaturePad @ref="signaturePad" />
        </div>

        @if (!string.IsNullOrEmpty(record.SignatureBase64))
        {
            <div class="md:col-span-2">
                <img src="@record.SignatureBase64" class="border mt-1 w-48 h-auto rounded shadow" />
            </div>
        }

        <div class="md:col-span-2">
            <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition">
                Save Training
            </button>
        </div>
        @if (showSuccessAlert)
        {
            <div class="mt-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded shadow" role="alert">
                <strong class="font-bold">Success!</strong>
                <span class="block sm:inline ml-2">@successMessage</span>
                <button @onclick="() => showSuccessAlert = false"
                        class="ml-4 text-green-700 font-bold hover:text-green-900 float-right">
                    ✕
                </button>
            </div>
        }

    </div>
</EditForm>




@code {
    private Training record = new();
    private List<TrainerDto> trainers = new();
    private List<Equipment> equipmentList = new();
    private SignaturePad? signaturePad;

    private bool showSuccessAlert = false;
    private string successMessage = string.Empty;
    private bool IsAdmin = false;


    protected override async Task OnInitializedAsync()
    {
        // Load trainers and equipment
        trainers = await Http.GetFromJsonAsync<List<TrainerDto>>("api/trainings/trainers") ?? new();
        equipmentList = await Http.GetFromJsonAsync<List<Equipment>>("api/equipment") ?? new();

        // Get logged-in user's name
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            IsAdmin = user.IsInRole("Admin");

            if (!IsAdmin)
            {
                record.StaffName = user.FindFirst("FullName")?.Value
                        ?? user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value
                        ?? user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value
                        ?? "Unknown";
            }
        }
    }

    private async Task Submit()
    {
        
        var name = record.StaffName;
        if (signaturePad is not null)
        {
            record.SignatureBase64 = await signaturePad.GetSignatureAsync();
        }

        var trainerName = trainers.FirstOrDefault(t => t.Id == record.TrainerId)?.Name;
        record.TrainerName = trainerName;
        // await Http.PostAsJsonAsync("api/events", record);
        await Http.PostAsJsonAsync("api/trainings", record);

        successMessage = "Training saved successfully!";
        showSuccessAlert = true;
        StateHasChanged();
        await Task.Delay(300);

        // Auto-hide after 3 seconds:
        await Task.Delay(3000);
        showSuccessAlert = false;
        record = new();// Reset form

        record.StaffName = name;
    }

    public class Equipment
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
