@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Blazored.LocalStorage
@using GreensProPWA.Client.Provider
@using Microsoft.AspNetCore.Components.Authorization
@page "/"
@* @inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JS
@page "/"

<h3>Login</h3>

<div>
    <input placeholder="Email" @bind="email" />
</div>
<div>
    <input placeholder="Password" type="password" @bind="password" />
</div>
<button @onclick="HandleLogin">Login</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-red-600">@errorMessage</p>
}

@code {
    private string email = "";
    private string password = "";
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        var loginRequest = new { Email = email, Password = password };
        var response = await Http.PostAsJsonAsync("api/auth/login", loginRequest);

        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<LoginResponse>();
            if (data is not null)
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", data.token);
                NavManager.NavigateTo("/home");
            }
        }
        else
        {
            errorMessage = "Invalid login";
        }
    }

    private class LoginResponse
    {
        public string token { get; set; } = "";
        public string email { get; set; } = "";
        public string role { get; set; } = "";
    }
} *@
@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
@layout EmptyLayout
@inject ILocalStorageService localStorage


<div class="min-h-screen flex items-center justify-center bg-gray-100">
    <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <h3 class="text-2xl font-semibold mb-6 text-center text-gray-800">Login to Your Account</h3>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
                <strong class="font-bold">Error: </strong>
                <span class="block sm:inline">@ErrorMessage</span>
            </div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600 mb-4" />

            <div class="mb-4">
                <label for="email" class="block text-gray-700 font-bold mb-2">Email</label>
                <InputText id="email" class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-green-500"
                           @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" class="text-red-600 text-sm mt-1" />
            </div>

            <div class="mb-6">
                <label for="password" class="block text-gray-700 font-bold mb-2">Password</label>
                <InputText id="password" type="password" class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-green-500"
                           @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-red-600 text-sm mt-1" />
            </div>

            <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded w-full">
                Log In
            </button>
        </EditForm>
    </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

@code {
    private LoginModel loginModel = new();

    private string ErrorMessage;

    private string? GetRoleFromJwt(string jwtToken)
    {
        var payload = jwtToken.Split('.')[1];
        var json = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(PadBase64(payload)));
        var payloadData = JsonSerializer.Deserialize<Dictionary<string, object>>(json);

        if (payloadData != null && payloadData.TryGetValue("role", out var role))
        {
            return role?.ToString();
        }
        return null;
    }

    private string PadBase64(string base64)
    {
        switch (base64.Length % 4)
        {
            case 2: return base64 + "==";
            case 3: return base64 + "=";
            default: return base64;
        }
    }


    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (data != null && !string.IsNullOrEmpty(data.token))
                {   
                    // Store JWT token in localStorage
                    // await JS.InvokeVoidAsync("localStorage.setItem", "authToken", data.token);
                    await localStorage.SetItemAsync("authToken", data.token);
                    ((JwtAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication(data.token);


                    if (data.role == "Admin")
                    {
                        Navigation.NavigateTo("/admin");
                    }
                    // Navigate to home or dashboard page after successful login
                    else{
                        Navigation.NavigateTo("/home");
                    }
                }
                else
                {
                    ErrorMessage = "Login failed: invalid server response.";
                }
            }
            else
            {
                // Read error message from response if available
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Login failed: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    private class LoginResponse
    {
        public string token { get; set; } = string.Empty;
        public string email { get; set; } = string.Empty;
        public string role { get; set; } = string.Empty;
    }
}
